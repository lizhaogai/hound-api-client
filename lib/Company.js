/**
 * hound-api-client
 * 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: towyuan@outlook.com
 *
 * NOTE: This library is auto generated by the Open API Codegen program.
 * https://github.com/taoyuan/generator-oac.git
 * Do not edit the class manually.
 *
 */

const utils = require('./_utils');

/*jshint -W069 */
/**
 * @class Company
 * @alias module:api/Company
 * @param {Requestor} [requestor] - The project domain or options object. If object, see the object's optional properties.
 */
class Company {
  constructor(requestor) {
    this.requestor = requestor;
  }
  /**
   * Find a related item by id for subCompany.
   *
   * @method
   * @path [GET] /Companies/{id}/subCompany/{fk}
   * @name Company#findSubCompanyById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for subCompany
   * @param {function} [cb] - Callback function
   */
  findSubCompanyById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findSubCompanyById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling findSubCompanyById");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/subCompany/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a related item by id for subCompany.
   *
   * @method
   * @path [DELETE] /Companies/{id}/subCompany/{fk}
   * @name Company#destroySubCompanyById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for subCompany
   * @param {function} [cb] - Callback function
   */
  destroySubCompanyById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroySubCompanyById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling destroySubCompanyById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/subCompany/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update a related item by id for subCompany.
   *
   * @method
   * @path [PUT] /Companies/{id}/subCompany/{fk}
   * @name Company#updateSubCompanyById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for subCompany
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  updateSubCompanyById(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateSubCompanyById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling updateSubCompanyById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/subCompany/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Fetches belongsTo relation parent.
   *
   * @method
   * @path [GET] /Companies/{id}/parent
   * @name Company#getParent
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {boolean} [opts.refresh] - refresh
   * @param {function} [cb] - Callback function
   */
  getParent(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getParent");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      refresh: opts['refresh'],
    };

    const path = utils.buildPath('/Companies/{id}/parent', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find a related item by id for incomes.
   *
   * @method
   * @path [GET] /Companies/{id}/incomes/{fk}
   * @name Company#findIncomesById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for incomes
   * @param {function} [cb] - Callback function
   */
  findIncomesById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findIncomesById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling findIncomesById");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/incomes/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a related item by id for incomes.
   *
   * @method
   * @path [DELETE] /Companies/{id}/incomes/{fk}
   * @name Company#destroyIncomesById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for incomes
   * @param {function} [cb] - Callback function
   */
  destroyIncomesById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroyIncomesById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling destroyIncomesById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/incomes/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update a related item by id for incomes.
   *
   * @method
   * @path [PUT] /Companies/{id}/incomes/{fk}
   * @name Company#updateIncomesById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for incomes
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  updateIncomesById(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateIncomesById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling updateIncomesById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/incomes/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Fetches belongsTo relation manager.
   *
   * @method
   * @path [GET] /Companies/{id}/manager
   * @name Company#getManager
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {boolean} [opts.refresh] - refresh
   * @param {function} [cb] - Callback function
   */
  getManager(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getManager");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      refresh: opts['refresh'],
    };

    const path = utils.buildPath('/Companies/{id}/manager', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find a related item by id for members.
   *
   * @method
   * @path [GET] /Companies/{id}/members/{fk}
   * @name Company#findMembersById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for members
   * @param {function} [cb] - Callback function
   */
  findMembersById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findMembersById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling findMembersById");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/members/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a related item by id for members.
   *
   * @method
   * @path [DELETE] /Companies/{id}/members/{fk}
   * @name Company#destroyMembersById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for members
   * @param {function} [cb] - Callback function
   */
  destroyMembersById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroyMembersById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling destroyMembersById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/members/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update a related item by id for members.
   *
   * @method
   * @path [PUT] /Companies/{id}/members/{fk}
   * @name Company#updateMembersById
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for members
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  updateMembersById(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateMembersById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling updateMembersById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/members/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Add a related item by id for members.
   *
   * @method
   * @path [PUT] /Companies/{id}/members/rel/{fk}
   * @name Company#linkMembers
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for members
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  linkMembers(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling linkMembers");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling linkMembers");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/members/rel/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Remove the members relation to an item by id.
   *
   * @method
   * @path [DELETE] /Companies/{id}/members/rel/{fk}
   * @name Company#unlinkMembers
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for members
   * @param {function} [cb] - Callback function
   */
  unlinkMembers(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling unlinkMembers");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling unlinkMembers");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/members/rel/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check the existence of members relation to an item by id.
   *
   * @method
   * @path [HEAD] /Companies/{id}/members/rel/{fk}
   * @name Company#existsMembers
   * @param {string} id - Company id
   * @param {string} fk - Foreign key for members
   * @param {function} [cb] - Callback function
   */
  existsMembers(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling existsMembers");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling existsMembers");
    }

    const req = {
      method: 'HEAD',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/members/rel/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Queries subCompany of Company.
   *
   * @method
   * @path [GET] /Companies/{id}/subCompany
   * @name Company#getSubCompany
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - filter
   * @param {function} [cb] - Callback function
   */
  getSubCompany(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getSubCompany");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/Companies/{id}/subCompany', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Creates a new instance in subCompany of this model.
   *
   * @method
   * @path [POST] /Companies/{id}/subCompany
   * @name Company#createSubCompany
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  createSubCompany(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createSubCompany");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/subCompany', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Deletes all subCompany of this model.
   *
   * @method
   * @path [DELETE] /Companies/{id}/subCompany
   * @name Company#deleteSubCompany
   * @param {string} id - Company id
   * @param {function} [cb] - Callback function
   */
  deleteSubCompany(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteSubCompany");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/subCompany', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Counts subCompany of Company.
   *
   * @method
   * @path [GET] /Companies/{id}/subCompany/count
   * @name Company#countSubCompany
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  countSubCompany(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling countSubCompany");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = utils.buildPath('/Companies/{id}/subCompany/count', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Queries incomes of Company.
   *
   * @method
   * @path [GET] /Companies/{id}/incomes
   * @name Company#getIncomes
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - filter
   * @param {function} [cb] - Callback function
   */
  getIncomes(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getIncomes");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/Companies/{id}/incomes', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Creates a new instance in incomes of this model.
   *
   * @method
   * @path [POST] /Companies/{id}/incomes
   * @name Company#createIncomes
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  createIncomes(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createIncomes");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/incomes', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Deletes all incomes of this model.
   *
   * @method
   * @path [DELETE] /Companies/{id}/incomes
   * @name Company#deleteIncomes
   * @param {string} id - Company id
   * @param {function} [cb] - Callback function
   */
  deleteIncomes(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteIncomes");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/incomes', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Counts incomes of Company.
   *
   * @method
   * @path [GET] /Companies/{id}/incomes/count
   * @name Company#countIncomes
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  countIncomes(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling countIncomes");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = utils.buildPath('/Companies/{id}/incomes/count', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Queries members of Company.
   *
   * @method
   * @path [GET] /Companies/{id}/members
   * @name Company#getMembers
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - filter
   * @param {function} [cb] - Callback function
   */
  getMembers(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getMembers");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/Companies/{id}/members', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Creates a new instance in members of this model.
   *
   * @method
   * @path [POST] /Companies/{id}/members
   * @name Company#createMembers
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  createMembers(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createMembers");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/members', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Deletes all members of this model.
   *
   * @method
   * @path [DELETE] /Companies/{id}/members
   * @name Company#deleteMembers
   * @param {string} id - Company id
   * @param {function} [cb] - Callback function
   */
  deleteMembers(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteMembers");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/members', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Counts members of Company.
   *
   * @method
   * @path [GET] /Companies/{id}/members/count
   * @name Company#countMembers
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  countMembers(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling countMembers");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = utils.buildPath('/Companies/{id}/members/count', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a new instance of the model and persist it into the data source.
   *
   * @method
   * @path [POST] /Companies
   * @name Company#create
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  create(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Companies';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Patch an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [PATCH] /Companies
   * @name Company#patchOrCreate
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  patchOrCreate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PATCH',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Companies';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [PUT] /Companies
   * @name Company#replaceOrCreate
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceOrCreate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Companies';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find all instances of the model matched by filter from the data source.
   *
   * @method
   * @path [GET] /Companies
   * @name Company#find
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  find(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = '/Companies';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [POST] /Companies/replaceOrCreate
   * @name Company#replaceOrCreateViaPost
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceOrCreateViaPost(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/Companies/replaceOrCreate';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update an existing model instance or insert a new one into the data source based on the where criteria.
   *
   * @method
   * @path [POST] /Companies/upsertWithWhere
   * @name Company#upsertWithWhere
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  upsertWithWhere(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };
    req.data = opts['data'];

    const path = '/Companies/upsertWithWhere';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check whether a model instance exists in the data source.
   *
   * @method
   * @path [GET] /Companies/{id}/exists
   * @name Company#exists
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  exists(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling exists");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/exists', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check whether a model instance exists in the data source.
   *
   * @method
   * @path [HEAD] /Companies/{id}
   * @name Company#existsViaHead
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  existsViaHead(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling existsViaHead");
    }

    const req = {
      method: 'HEAD',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find a model instance by {{id}} from the data source.
   *
   * @method
   * @path [GET] /Companies/{id}
   * @name Company#findById
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  findById(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/Companies/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [PUT] /Companies/{id}
   * @name Company#replaceById
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceById(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling replaceById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a model instance by {{id}} from the data source.
   *
   * @method
   * @path [DELETE] /Companies/{id}
   * @name Company#deleteById
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  deleteById(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Patch attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [PATCH] /Companies/{id}
   * @name Company#patchAttributes
   * @param {string} id - Company id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  patchAttributes(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling patchAttributes");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PATCH',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [POST] /Companies/{id}/replace
   * @name Company#replaceByIdViaPost
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceByIdViaPost(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling replaceByIdViaPost");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/Companies/{id}/replace', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find first instance of the model matched by filter from the data source.
   *
   * @method
   * @path [GET] /Companies/findOne
   * @name Company#findOne
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  findOne(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = '/Companies/findOne';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update instances of the model matched by {{where}} from the data source.
   *
   * @method
   * @path [POST] /Companies/update
   * @name Company#updateAll
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  updateAll(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };
    req.data = opts['data'];

    const path = '/Companies/update';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Count instances of the model matched by where from the data source.
   *
   * @method
   * @path [GET] /Companies/count
   * @name Company#count
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  count(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = '/Companies/count';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a change stream.
   *
   * @method
   * @path [POST] /Companies/change-stream
   * @name Company#createChangeStreamViaPost
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  createChangeStreamViaPost(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      options: opts['options'],
    };

    const path = '/Companies/change-stream';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a change stream.
   *
   * @method
   * @path [GET] /Companies/change-stream
   * @name Company#createChangeStream
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  createChangeStream(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      options: opts['options'],
    };

    const path = '/Companies/change-stream';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 为这间公司任命经理
   *
   * @method
   * @path [PUT] /Companies/{id}/account/{userId}
   * @name Company#setManager
   * @param {string} id - Company id
   * @param {string} userId - 用户的ID
   * @param {function} [cb] - Callback function
   */
  setManager(id, userId, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling setManager");
    }
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling setManager");
    }

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/account/{userId}', {
      id: id,
      userId: userId,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 统计公司下微信数量
   *
   * @method
   * @path [GET] /Companies/socialGroup/count
   * @name Company#countSocialGroups
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.id] - 公司ID
   * @param {string} [opts.type] - 只查询该公司(true),查全部就传false
   * @param {string} [opts.filter] - 直接传过滤对象 无需where
   * @param {function} [cb] - Callback function
   */
  countSocialGroups(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      id: opts['id'],
      type: opts['type'],
      filter: opts['filter'],
    };

    const path = '/Companies/socialGroup/count';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 统计公司下的微信
   *
   * @method
   * @path [GET] /Companies/socialGroup
   * @name Company#socialGroupsDatas
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.id] - 公司ID
   * @param {string} [opts.type] - 只查询该公司(true),查全部就传false
   * @param {string} [opts.filter] - 直接传过滤对象 需where
   * @param {function} [cb] - Callback function
   */
  socialGroupsDatas(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      id: opts['id'],
      type: opts['type'],
      filter: opts['filter'],
    };

    const path = '/Companies/socialGroup';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 统计公司下的子公司
   *
   * @method
   * @path [GET] /Companies/subCompany
   * @name Company#getSubCompany
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.id] - 公司ID
   * @param {function} [cb] - Callback function
   */
  getSubCompany(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      id: opts['id'],
    };

    const path = '/Companies/subCompany';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 上传
   *
   * @method
   * @path [POST] /Companies/{id}/avatar
   * @name Company#uploadAvatar
   * @param {string} id - Id
   * @param {function} [cb] - Callback function
   */
  uploadAvatar(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling uploadAvatar");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/avatar', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 下载
   *
   * @method
   * @path [GET] /Companies/{id}/avatar
   * @name Company#downloadAvatar
   * @param {string} id - Id
   * @param {function} [cb] - Callback function
   */
  downloadAvatar(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling downloadAvatar");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/avatar', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 删除
   *
   * @method
   * @path [DELETE] /Companies/{id}/avatar
   * @name Company#removeAvatar
   * @param {string} id - Id
   * @param {function} [cb] - Callback function
   */
  removeAvatar(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling removeAvatar");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/Companies/{id}/avatar', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
}

module.exports = Company;