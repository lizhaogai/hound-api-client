/**
 * hound-api-client
 * 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: towyuan@outlook.com
 *
 * NOTE: This library is auto generated by the Open API Codegen program.
 * https://github.com/taoyuan/generator-oac.git
 * Do not edit the class manually.
 *
 */

const utils = require('./_utils');

/*jshint -W069 */
/**
 * @class SocialGroup
 * @alias module:api/SocialGroup
 * @param {Requestor} [requestor] - The project domain or options object. If object, see the object's optional properties.
 */
class SocialGroup {
  constructor(requestor) {
    this.requestor = requestor;
  }
  /**
   * Find a related item by id for accounts.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/accounts/{fk}
   * @name SocialGroup#findAccountsById
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for accounts
   * @param {function} [cb] - Callback function
   */
  findAccountsById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findAccountsById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling findAccountsById");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/accounts/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a related item by id for accounts.
   *
   * @method
   * @path [DELETE] /SocialGroups/{id}/accounts/{fk}
   * @name SocialGroup#destroyAccountsById
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for accounts
   * @param {function} [cb] - Callback function
   */
  destroyAccountsById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroyAccountsById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling destroyAccountsById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/accounts/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update a related item by id for accounts.
   *
   * @method
   * @path [PUT] /SocialGroups/{id}/accounts/{fk}
   * @name SocialGroup#updateAccountsById
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for accounts
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  updateAccountsById(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateAccountsById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling updateAccountsById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}/accounts/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Add a related item by id for accounts.
   *
   * @method
   * @path [PUT] /SocialGroups/{id}/accounts/rel/{fk}
   * @name SocialGroup#linkAccounts
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for accounts
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  linkAccounts(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling linkAccounts");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling linkAccounts");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}/accounts/rel/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Remove the accounts relation to an item by id.
   *
   * @method
   * @path [DELETE] /SocialGroups/{id}/accounts/rel/{fk}
   * @name SocialGroup#unlinkAccounts
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for accounts
   * @param {function} [cb] - Callback function
   */
  unlinkAccounts(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling unlinkAccounts");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling unlinkAccounts");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/accounts/rel/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check the existence of accounts relation to an item by id.
   *
   * @method
   * @path [HEAD] /SocialGroups/{id}/accounts/rel/{fk}
   * @name SocialGroup#existsAccounts
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for accounts
   * @param {function} [cb] - Callback function
   */
  existsAccounts(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling existsAccounts");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling existsAccounts");
    }

    const req = {
      method: 'HEAD',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/accounts/rel/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Fetches belongsTo relation wechat.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/wechat
   * @name SocialGroup#getWechat
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {boolean} [opts.refresh] - refresh
   * @param {function} [cb] - Callback function
   */
  getWechat(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getWechat");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      refresh: opts['refresh'],
    };

    const path = utils.buildPath('/SocialGroups/{id}/wechat', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Fetches belongsTo relation company.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/company
   * @name SocialGroup#getCompany
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {boolean} [opts.refresh] - refresh
   * @param {function} [cb] - Callback function
   */
  getCompany(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getCompany");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      refresh: opts['refresh'],
    };

    const path = utils.buildPath('/SocialGroups/{id}/company', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find a related item by id for socialGroupStatus.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/socialGroupStatus/{fk}
   * @name SocialGroup#findSocialGroupStatusById
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for socialGroupStatus
   * @param {function} [cb] - Callback function
   */
  findSocialGroupStatusById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findSocialGroupStatusById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling findSocialGroupStatusById");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a related item by id for socialGroupStatus.
   *
   * @method
   * @path [DELETE] /SocialGroups/{id}/socialGroupStatus/{fk}
   * @name SocialGroup#destroySocialGroupStatusById
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for socialGroupStatus
   * @param {function} [cb] - Callback function
   */
  destroySocialGroupStatusById(id, fk, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroySocialGroupStatusById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling destroySocialGroupStatusById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update a related item by id for socialGroupStatus.
   *
   * @method
   * @path [PUT] /SocialGroups/{id}/socialGroupStatus/{fk}
   * @name SocialGroup#updateSocialGroupStatusById
   * @param {string} id - SocialGroup id
   * @param {string} fk - Foreign key for socialGroupStatus
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  updateSocialGroupStatusById(id, fk, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateSocialGroupStatusById");
    }
    // verify the required parameter 'fk' is set
    if (fk === undefined || fk === null) {
      throw new Error("Missing the required parameter 'fk' when calling updateSocialGroupStatusById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus/{fk}', {
      id: id,
      fk: fk,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Queries accounts of SocialGroup.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/accounts
   * @name SocialGroup#getAccounts
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - filter
   * @param {function} [cb] - Callback function
   */
  getAccounts(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getAccounts");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/SocialGroups/{id}/accounts', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Creates a new instance in accounts of this model.
   *
   * @method
   * @path [POST] /SocialGroups/{id}/accounts
   * @name SocialGroup#createAccounts
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  createAccounts(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createAccounts");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}/accounts', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Deletes all accounts of this model.
   *
   * @method
   * @path [DELETE] /SocialGroups/{id}/accounts
   * @name SocialGroup#deleteAccounts
   * @param {string} id - SocialGroup id
   * @param {function} [cb] - Callback function
   */
  deleteAccounts(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteAccounts");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/accounts', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Counts accounts of SocialGroup.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/accounts/count
   * @name SocialGroup#countAccounts
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  countAccounts(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling countAccounts");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = utils.buildPath('/SocialGroups/{id}/accounts/count', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Queries socialGroupStatus of SocialGroup.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/socialGroupStatus
   * @name SocialGroup#getSocialGroupStatus
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - filter
   * @param {function} [cb] - Callback function
   */
  getSocialGroupStatus(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling getSocialGroupStatus");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Creates a new instance in socialGroupStatus of this model.
   *
   * @method
   * @path [POST] /SocialGroups/{id}/socialGroupStatus
   * @name SocialGroup#createSocialGroupStatus
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - data
   * @param {function} [cb] - Callback function
   */
  createSocialGroupStatus(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling createSocialGroupStatus");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Deletes all socialGroupStatus of this model.
   *
   * @method
   * @path [DELETE] /SocialGroups/{id}/socialGroupStatus
   * @name SocialGroup#deleteSocialGroupStatus
   * @param {string} id - SocialGroup id
   * @param {function} [cb] - Callback function
   */
  deleteSocialGroupStatus(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteSocialGroupStatus");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Counts socialGroupStatus of SocialGroup.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/socialGroupStatus/count
   * @name SocialGroup#countSocialGroupStatus
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  countSocialGroupStatus(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling countSocialGroupStatus");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = utils.buildPath('/SocialGroups/{id}/socialGroupStatus/count', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a new instance of the model and persist it into the data source.
   *
   * @method
   * @path [POST] /SocialGroups
   * @name SocialGroup#create
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  create(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/SocialGroups';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Patch an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [PATCH] /SocialGroups
   * @name SocialGroup#patchOrCreate
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  patchOrCreate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PATCH',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/SocialGroups';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [PUT] /SocialGroups
   * @name SocialGroup#replaceOrCreate
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceOrCreate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/SocialGroups';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find all instances of the model matched by filter from the data source.
   *
   * @method
   * @path [GET] /SocialGroups
   * @name SocialGroup#find
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  find(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = '/SocialGroups';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace an existing model instance or insert a new one into the data source.
   *
   * @method
   * @path [POST] /SocialGroups/replaceOrCreate
   * @name SocialGroup#replaceOrCreateViaPost
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceOrCreateViaPost(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = '/SocialGroups/replaceOrCreate';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update an existing model instance or insert a new one into the data source based on the where criteria.
   *
   * @method
   * @path [POST] /SocialGroups/upsertWithWhere
   * @name SocialGroup#upsertWithWhere
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  upsertWithWhere(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };
    req.data = opts['data'];

    const path = '/SocialGroups/upsertWithWhere';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check whether a model instance exists in the data source.
   *
   * @method
   * @path [GET] /SocialGroups/{id}/exists
   * @name SocialGroup#exists
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  exists(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling exists");
    }

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}/exists', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Check whether a model instance exists in the data source.
   *
   * @method
   * @path [HEAD] /SocialGroups/{id}
   * @name SocialGroup#existsViaHead
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  existsViaHead(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling existsViaHead");
    }

    const req = {
      method: 'HEAD',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find a model instance by {{id}} from the data source.
   *
   * @method
   * @path [GET] /SocialGroups/{id}
   * @name SocialGroup#findById
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  findById(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling findById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = utils.buildPath('/SocialGroups/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [PUT] /SocialGroups/{id}
   * @name SocialGroup#replaceById
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceById(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling replaceById");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PUT',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Delete a model instance by {{id}} from the data source.
   *
   * @method
   * @path [DELETE] /SocialGroups/{id}
   * @name SocialGroup#deleteById
   * @param {string} id - Model id
   * @param {function} [cb] - Callback function
   */
  deleteById(id, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling deleteById");
    }

    const req = {
      method: 'DELETE',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    const path = utils.buildPath('/SocialGroups/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Patch attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [PATCH] /SocialGroups/{id}
   * @name SocialGroup#patchAttributes
   * @param {string} id - SocialGroup id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  patchAttributes(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling patchAttributes");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'PATCH',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Replace attributes for a model instance and persist it into the data source.
   *
   * @method
   * @path [POST] /SocialGroups/{id}/replace
   * @name SocialGroup#replaceByIdViaPost
   * @param {string} id - Model id
   * @param {object|function|*} [opts] - Optional params
   * @param {object} [opts.data] - Model instance data
   * @param {function} [cb] - Callback function
   */
  replaceByIdViaPost(id, opts, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling replaceByIdViaPost");
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.data = opts['data'];

    const path = utils.buildPath('/SocialGroups/{id}/replace', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Find first instance of the model matched by filter from the data source.
   *
   * @method
   * @path [GET] /SocialGroups/findOne
   * @name SocialGroup#findOne
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
   * @param {function} [cb] - Callback function
   */
  findOne(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
    };

    const path = '/SocialGroups/findOne';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Update instances of the model matched by {{where}} from the data source.
   *
   * @method
   * @path [POST] /SocialGroups/update
   * @name SocialGroup#updateAll
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {object} [opts.data] - An object of model property name/value pairs
   * @param {function} [cb] - Callback function
   */
  updateAll(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };
    req.data = opts['data'];

    const path = '/SocialGroups/update';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Count instances of the model matched by where from the data source.
   *
   * @method
   * @path [GET] /SocialGroups/count
   * @name SocialGroup#count
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.where] - Criteria to match model instances
   * @param {function} [cb] - Callback function
   */
  count(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      where: opts['where'],
    };

    const path = '/SocialGroups/count';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a change stream.
   *
   * @method
   * @path [POST] /SocialGroups/change-stream
   * @name SocialGroup#createChangeStreamViaPost
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  createChangeStreamViaPost(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      options: opts['options'],
    };

    const path = '/SocialGroups/change-stream';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Create a change stream.
   *
   * @method
   * @path [GET] /SocialGroups/change-stream
   * @name SocialGroup#createChangeStream
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  createChangeStream(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      options: opts['options'],
    };

    const path = '/SocialGroups/change-stream';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 绑定微信号
   *
   * @method
   * @path [POST] /SocialGroups/bind
   * @name SocialGroup#bindSocialGroup
   * @param {string} mid - 要绑定微信群ID
   * @param {string} wid - 弹出框中选择的微信群ID
   * @param {function} [cb] - Callback function
   */
  bindSocialGroup(mid, wid, cb) {
    // verify the required parameter 'mid' is set
    if (mid === undefined || mid === null) {
      throw new Error("Missing the required parameter 'mid' when calling bindSocialGroup");
    }
    // verify the required parameter 'wid' is set
    if (wid === undefined || wid === null) {
      throw new Error("Missing the required parameter 'wid' when calling bindSocialGroup");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      mid: mid,
      wid: wid,
    };

    const path = '/SocialGroups/bind';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * 设置员工的群成员数量
   *
   * @method
   * @path [POST] /SocialGroups/{id}/set-division
   * @name SocialGroup#resetDivision
   * @param {string} id - SocialGroup id
   * @param {string} division - division 数组
   * @param {function} [cb] - Callback function
   */
  resetDivision(id, division, cb) {
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling resetDivision");
    }
    // verify the required parameter 'division' is set
    if (division === undefined || division === null) {
      throw new Error("Missing the required parameter 'division' when calling resetDivision");
    }

    const req = {
      method: 'POST',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.form = {
      division: division,
    };

    const path = utils.buildPath('/SocialGroups/{id}/set-division', {
      id: id,
    });

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
  /**
   * Aggregate by filter from the data source.
   *
   * @method
   * @path [GET] /SocialGroups/aggregate
   * @name SocialGroup#aggregate
   * @param {object|function|*} [opts] - Optional params
   * @param {string} [opts.filter] - Filter defining fields, where, aggregate, order, offset, and limit
   * @param {string} [opts.options] - options
   * @param {function} [cb] - Callback function
   */
  aggregate(opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = null;
    }
    opts = opts || {};

    const req = {
      method: 'GET',
      headers: {}
    };

    req.headers['Accept'] = 'application/json';

    req.params = {
      filter: opts['filter'],
      options: opts['options'],
    };

    const path = '/SocialGroups/aggregate';

    return this.requestor.request(path, req).then(function(result) {
      if (!cb) return result;
      cb(result);
    }, function(err) {
      if (!cb) throw err;
      cb(null, err);
    });
  }
}

module.exports = SocialGroup;